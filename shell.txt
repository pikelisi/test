bash-completion 是命令可TAB的软件

1.Shell解释器 历史命令 重定向标准输入/输出/错误输出 管道 变量的定义/赋值/查看 环境变量 位置变量与预定义变量 引号对变量赋值的影响 

2.expr $[]或$(())表达式 let bc 整数值比较 识别文件/目录的状态  && || ;   if

3.seq n(同等于{1..n}) 
echo -e "\033[背景颜色(数字);字体颜色（数字);5m内容\033[0m" 0x样式  3x字体颜色 4x背景颜色
PS1='[\[\e[32;40m\]\u@\h\w\]]#'  更改行颜色

for循环结构 while循环结构 case分支编写 Shell(调用)函数 中断及退出

4.字符串截取(3种)及切割(替换) 字符串初值的处理 数组(PPT) expect 正则表达式 -> (.)(.) \1\2  保留 粘贴

5.sed -n -r -i d,p,s  i(前插),a(后插),c(替换)  sed导入导出，复制剪切(ppt)
 打印奇数行： sed -n '1~2p' /etc/passwd   2~2p(d)则为打印(删除)偶数行
sed '$1~/?/{...}' xxx     匹配$1和？的值，相同输出
sed '$1!~/?/{...}' xxx     匹配$1和？的值，不相同输出

6.awk $1(第一列)  -F(不加默认空格) NR(有几行),NF(最后一列), \t  column -t(对齐) awk正则：$1~/正则/   数字和字符比较 == != >> <<    逻辑  && ||   运算    if(){}    if(){}else{}
  awk  [选项]   ' BEGIN{指令} {指令} END{指令}' 
              
统计 ： awk '{ip[$1]++}END{for(i in ip){print i,ip[i]}}'    i读的是$1的值
 sort -n(按数字计算)  -r(倒序)  -k(指定那列排前)

*******************************************************************************************************************


1.	永久修改历史命令条数    /etc/profile
	查看系统变量	env  		查看所有变量	set		发布全局变量	export
        将回显功能关闭（stty -echo），将回显功能恢复（stty echo）。

*******************************************************************************************************************

2.整数运算工具
	[root@svr5 ~]# X=1234                        //定义变量X
	[root@svr5 ~]# expr  $X  +（-*/%）  78 		 
使用$[]或$(())表达式
	[root@svr5 ~]# X=1234   
	[root@svr5 ~]# echo $[X+（-*/%）78]
let命令
	[root@svr5 ~]# X=1234  
	[root@svr5 ~]# let y=X+22
	[root@svr5 ~]# echo $y
	1256
bc非交互式运算(可运算小数)
	[root@svr5 ~]# echo 'scale=4;12.34+5.678' | bc
	18.018

字符串测试
1）== 比较两个字符串是否相同
2）!= 比较两个字符串是否不相同
3）一行执行多条命令的情况
# A && B                        //仅当A命令执行成功，才执行B命令
# A || B                        //仅当A命令执行失败，才执行B命令
# A ;  B                        //执行A命令后执行B命令，两者没有逻辑关系
# A && B || C                   //思考？
4) -z 检查变量的值是否未设置（空值）

整数值比较
1）-eq 比较两个数是否相等。
2）-ne 比较两个数是否不相等。
3）-gt 比较前面的整数是否大于后面的整数。
4）-ge 比较前面的整数是否大于或等于后面的整数。
5）-lt 比较前面的整数是否小于后面的整数。
6）-le 比较前面的整数是否小于或等于后面的整数。

• 检查文件状态
  -e : 判断文档是否存在，存在为真
  -d : 存在且为目录，才为真
  -f : 存在且为文件，才为真
  -r : 存在且具备读权限，才为真
  -w : 存在且具备写权限，才为真
  -x : 存在且具备执行权限，才为真
  -z : 输入值为空，才为真(空串) 
  -n : 输入值为非空，才为真


多个条件/操作的逻辑组合
1）&&，逻辑与
2）||，逻辑或

*******************************************************************************************************************

3.使用Shell函数
函数名() {
    命令序列
    .. ..
}

中断及退出
	break可以结束整个循环；continue结束本次循环，进入下一次循环；exit结束整个脚本

*******************************************************************************************************************

4.字符串截取及切割
使用${}方式截取字符串时，起始位置是从0开始的。
	[root@svr5 ~]# phone="13788768897"
	[root@svr5 ~]# echo ${phone:0:6}  //0为起始未，6为从起始位开始的后6位
	137887
	使用 expr substr
	[root@svr5 ~]# expr substr "$phone" 1 6
	137887
	使用cut分割工具
	从左侧截取前6个字符，可执行以下操作：
	[root@svr5 ~]# echo $phone | cut -b 1-6
	137887
	从第8个字符截取到末尾：
	[root@svr5 ~]# echo $phone | cut -b 8-
	8897
	截取不连续的字符，比如第3、5、8个字符：
	[root@svr5 ~]# echo $phone | cut -b 3,5,8
	788
字符串的替换
	${变量名/old/new}
	[root@svr5 ~]# echo  ${phone/8/X}
	137X8768897
	[root@svr5 ~]# echo  ${phone//8/X}
	137XX76XX97
字符串的匹配删除
	从左向右，最短匹配删除：${变量名#*关键词}
	从左向右，最长匹配删除：${变量名##*关键词}
	从右向左，最短匹配删除：${变量名%关键词*}
	从右向左，最长匹配删除：${变量名%%关键词*}

字符串初值的处理
1）只取值，${var:-word}
	若变量var已存在且非Null，则返回 $var 的值；否则返回字串“word”，原变量var的值不受影响。
	变量值已存在的情况：
	[root@svr5 ~]# XX=11
	[root@svr5 ~]# echo $XX              //查看原变量值
	11
	[root@svr5 ~]# echo ${XX:-123}      //因XX已存在，输出变量XX的值
	11
	变量值不存在的情况：
	[root@svr5 ~]# echo ${YY:-123}      //因YY不存在，输出“123”
	123

expect预期交互
	如果不希望ssh时出现yes/no的提示，远程时使用如下选项:
	# ssh -o StrictHostKeyChecking=no server0
例子：
	[root@svr5 ~]# vim  expect_ssh.sh 
	#!/bin/bash
	expect << EOF
	spawn ssh 192.168.4.5                               #//创建交互式进程
	expect "password:" { send "123456\r" }              #//自动发送密码
	expect "#"          { send "touch /tmp.txt\r" }     #//发送命令
	expect "#"          { send "exit\r" }
	EOF

正则表达式
		...

******************************************************************************************************************

5.sed基本用法
	用法1：前置命令 | sed  [选项]  '条件指令'
	用法2：sed  [选项]  '条件指令'  文件.. ..
sed命令的常用选项如下：
	-n（屏蔽默认输出，默认sed会输出读取文档的全部内容）
	-r（让sed支持扩展正则）
	-i（sed直接修改源文件，默认sed只是通过内存临时修改文件，源文件无影响）
sed多行文本处理
	[root@svr5 ~]# sed  '2a XX'   a.txt            //在第二行后面，追加XX
	[root@svr5 ~]# sed  '2i XX'   a.txt            //在第二行前面，插入XX
	[root@svr5 ~]# sed  '2c XX'   a.txt            //将第二行替换为XX

******************************************************************************************************************

6.使用awk提取文本
格式：awk [选项] '[条件]{指令}' 文件
	[root@svr5 ~]# cat test.txt 
	hello the world
	welcome to beijing
	[root@svr5 ~]# awk '{print $1,$3}' test.txt        //打印文档第1列和第3列
	hello world
	welcome beijing
选项 -F 可指定分隔符,识别多种单个的字符，比如以“:”或“/”分隔
	[root@svr5 ~]# awk -F: '{print $1,$7}' /etc/passwd
	root /bin/bash
	bin /sbin/nologin
awk处理的时机
awk  [选项]  ' BEGIN{指令} {指令} END{指令}'  文件

awk处理条件
输出其中以bash结尾的完整记录：
	[root@svr5 ~]# awk -F: '/bash$/{print}' /etc/passwd
	root:x:0:0:root:/root:/bin/bash
使用数值/字符串比较设置条件
输出第3行（行号NR等于3）的用户记录：
	[root@svr5 ~]# awk -F: 'NR==3{print}' /etc/passwd
输出账户UID大于等于1000的账户名称和UID信息：
	[root@svr5 ~]# awk -F: '$3>=1000{print $1,$3}' /etc/passwd
	tom 1000
	jerry 1001
逻辑测试条件
输出账户UID大于10并且小于20的账户信息：
	[root@svr5 ~]# awk -F: '$3>10 && $3<20' /etc/passwd
	operator:x:11:0:operator:/root:/sbin/nologin
数学运算
	[root@svr5 ~]# awk 'BEGIN{x++;print x}'
	1

awk流程控制
awk过滤中的if分支结构
	[root@svr5 ~]# awk -F: '{if($3<=1000){i++}}END{print i}' /etc/passwd
	39























